/** @file ImporterRegistry.cpp

Central registry for all importers available. Do not edit this file
directly (unless you are adding new loaders), instead use the
corresponding preprocessor flag to selectively disable formats.
*/

#include <assimp/anim.h>
#include <assimp/BaseImporter.h>
#include <vector>
#include <cstdlib>

// ------------------------------------------------------------------------------------------------
// Importers
// (include_new_importers_here)
// ------------------------------------------------------------------------------------------------
#ifndef ASSIMP_BUILD_NO_OBJ_IMPORTER
#include "AssetLib/Obj/ObjFileImporter.h"
#endif
#ifndef ASSIMP_BUILD_NO_STL_IMPORTER
#include "AssetLib/STL/STLLoader.h"
#endif
#ifndef ASSIMP_BUILD_NO_BVH_IMPORTER
#include "AssetLib/BVH/BVHLoader.h"
#endif
#ifndef ASSIMP_BUILD_NO_FBX_IMPORTER
#include "AssetLib/FBX/FBXImporter.h"
#endif
#if !defined(ASSIMP_BUILD_NO_GLTF_IMPORTER) && !defined(ASSIMP_BUILD_NO_GLTF1_IMPORTER)
#include "AssetLib/glTF/glTFImporter.h"
#endif
#if !defined(ASSIMP_BUILD_NO_GLTF_IMPORTER) && !defined(ASSIMP_BUILD_NO_GLTF2_IMPORTER)
#include "AssetLib/glTF2/glTF2Importer.h"
#endif
namespace Assimp {

// ------------------------------------------------------------------------------------------------
void GetImporterInstanceList(std::vector<BaseImporter *> &out) {

    // Some importers may be unimplemented or otherwise unsuitable for general use
    // in their current state. Devs can set ASSIMP_ENABLE_DEV_IMPORTERS in their
    // local environment to enable them, otherwise they're left out of the registry.
    const char *envStr = std::getenv("ASSIMP_ENABLE_DEV_IMPORTERS");
    bool devImportersEnabled = envStr && strcmp(envStr, "0");

    // Ensure no unused var warnings if all uses are #ifndef'd away below:
    (void)devImportersEnabled;

    // ----------------------------------------------------------------------------
    // Add an instance of each worker class here
    // (register_new_importers_here)
    // ----------------------------------------------------------------------------
    out.reserve(64);
#if (!defined ASSIMP_BUILD_NO_OBJ_IMPORTER)
    out.push_back(new ObjFileImporter());
#endif
#if (!defined ASSIMP_BUILD_NO_STL_IMPORTER)
    out.push_back(new STLImporter());
#endif
#if (!defined ASSIMP_BUILD_NO_BVH_IMPORTER)
    out.push_back(new BVHLoader());
#endif
#if (!defined ASSIMP_BUILD_NO_FBX_IMPORTER)
    out.push_back(new FBXImporter());
#endif
#if (!defined ASSIMP_BUILD_NO_GLTF_IMPORTER && !defined ASSIMP_BUILD_NO_GLTF1_IMPORTER)
    out.push_back(new glTFImporter());
#endif
#if (!defined ASSIMP_BUILD_NO_GLTF_IMPORTER && !defined ASSIMP_BUILD_NO_GLTF2_IMPORTER)
    out.push_back(new glTF2Importer());
#endif
}

/** will delete all registered importers. */
void DeleteImporterInstanceList(std::vector<BaseImporter *> &deleteList) {
    for (size_t i = 0; i < deleteList.size(); ++i) {
        delete deleteList[i];
        deleteList[i] = nullptr;
    } //for
}

} // namespace Assimp
